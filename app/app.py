import sys, os, json
from dotenv import load_dotenv
load_dotenv()

# --- Import guard ---
ROOT_DIR = os.path.abspath(os.path.join(os.path.dirname(__file__), ".."))
if ROOT_DIR not in sys.path:
    sys.path.insert(0, ROOT_DIR)

import streamlit as st
from capintel.signal_engine import build_signal
from capintel.backtest import toy_backtest
from capintel.providers.polygon_client import get_last_price, PolygonError
from capintel.visuals import render_sentiment_gauge
from streamlit.components.v1 import html as st_html
from capintel.visuals_svg import render_gauge_svg


st.set_page_config(page_title="CapIntel ‚Äî Signals", page_icon="üìà", layout="wide")
st.title("üìà CapIntel ‚Äî –ò–¥–µ–∏ –¥–ª—è Crypto & Equities (MVP)")
st.caption("–§–æ—Ä–º–∞—Ç: BUY / SHORT / CLOSE / WAIT + —É—Ä–æ–≤–Ω–∏ –≤—Ö–æ–¥–∞/—Ü–µ–ª–µ–π/—Å—Ç–æ–ø–∞, confidence –∏ —Å—Ü–µ–Ω–∞—Ä–∏–∏.")

# –ë–µ–∑–æ–ø–∞—Å–Ω—ã–µ –¥–µ—Ñ–æ–ª—Ç—ã (–Ω–∞ —Å–ª—É—á–∞–π –ø–µ—Ä–≤–æ–≥–æ —Ä–µ–Ω–¥–µ—Ä–∞)
go = False
dev_mode = False
show_gauge = True

# ---------- Sidebar ----------
with st.sidebar:
    st.header("–ü–∞—Ä–∞–º–µ—Ç—Ä—ã")
    dev_mode = st.toggle("–†–µ–∂–∏–º —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫–∞", value=False, help="–ü–æ–∫–∞–∑–∞—Ç—å JSON –∏ –æ—Ç–ª–∞–¥–æ—á–Ω—ã–µ –±–ª–æ–∫–∏")
    show_gauge = st.toggle("–ü–æ–∫–∞–∑—ã–≤–∞—Ç—å –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä", value=True)

    asset_class = st.selectbox("–ö–ª–∞—Å—Å –∞–∫—Ç–∏–≤–∞", ["crypto", "equity"], index=0)
    horizon = st.selectbox("–ì–æ—Ä–∏–∑–æ–Ω—Ç", ["intraday", "swing", "position"], index=1)
    ticker = st.text_input("–¢–∏–∫–µ—Ä", value="BTCUSDT" if asset_class == "crypto" else "AAPL")

    # –î–µ—Ä–≥–∞–µ–º Polygon –¢–û–õ–¨–ö–û –ø–æ –∑–∞–ø—Ä–æ—Å—É
    if "last_price" not in st.session_state:
        st.session_state["last_price"] = 65000.0 if asset_class == "crypto" else 230.0

    colA, colB = st.columns([1, 1])
    with colA:
        if st.button("–û–±–Ω–æ–≤–∏—Ç—å —Ü–µ–Ω—É –∏–∑ Polygon", use_container_width=True):
            try:
                st.session_state["last_price"] = float(get_last_price(asset_class, ticker))
                st.success(f"–¶–µ–Ω–∞: {st.session_state['last_price']:.4f}")
            except PolygonError as e:
                st.error(str(e))
    with colB:
        st.metric("–¶–µ–Ω–∞ (Polygon)", f"{st.session_state['last_price']:.4f}")

    st.write("---")
    st.caption("–ò—Å—Ç–æ—á–Ω–∏–∫ —Ü–µ–Ω: Polygon. –í —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –ø–æ—Å–ª–µ–¥–Ω—è—è —É—Å–ø–µ—à–Ω–∞—è —Ü–µ–Ω–∞.")

    # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Å–µ—Å—Å–∏–∏
    if "stats" not in st.session_state:
        st.session_state["stats"] = {"buy": 0, "sell": 0, "neutral": 0, "total": 0}
    if st.button("–°–±—Ä–æ—Å–∏—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É", use_container_width=True):
        st.session_state["stats"] = {"buy": 0, "sell": 0, "neutral": 0, "total": 0}

    go = st.button("–°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å —Å–∏–≥–Ω–∞–ª", type="primary", use_container_width=True)

# ---------- Main ----------
if go:
    # –ü—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ ‚Äî –µ—â—ë —Ä–∞–∑ –∞–∫–∫—É—Ä–∞—Ç–Ω–æ –ø—Ä–æ–±—É–µ–º –ø–æ–¥—Ç—è–Ω—É—Ç—å —Ü–µ–Ω—É
    price_for_signal = st.session_state["last_price"]
    try:
        price_for_signal = float(get_last_price(asset_class, ticker))
        st.session_state["last_price"] = price_for_signal
    except Exception:
        pass  # –æ—Å—Ç–∞—ë–º—Å—è –Ω–∞ –ø–æ—Å–ª–µ–¥–Ω–µ–π —Ü–µ–Ω–µ

    sig = build_signal(ticker, asset_class, horizon, price_for_signal)

    # –û–±–Ω–æ–≤–∏–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ –¥–µ–π—Å—Ç–≤–∏—é
    st.session_state["stats"]["total"] += 1
    if   sig.action == "BUY":   st.session_state["stats"]["buy"] += 1
    elif sig.action == "SHORT": st.session_state["stats"]["sell"] += 1
    else:                       st.session_state["stats"]["neutral"] += 1

    col1, col2 = st.columns([1.05, 1.0])

    # --- –ö–∞—Ä—Ç–æ—á–∫–∞ –∏–¥–µ–∏ ---
    with col1:
        st.subheader(f"{sig.ticker} ¬∑ {sig.asset_class.upper()} ¬∑ {sig.horizon}")
        st.markdown(f"### ‚û§ –î–µ–π—Å—Ç–≤–∏–µ: **{sig.action}**")
        st.markdown(
            f"""
**–í—Ö–æ–¥:** `{sig.entry}`  
**–¶–µ–ª–∏:** `TP1 {sig.take_profit[0]}` ¬∑ `TP2 {sig.take_profit[1]}`  
**–°—Ç–æ–ø:** `{sig.stop}`  
**–£–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å:** `{int(sig.confidence * 100)}%`  
**–†–∞–∑–º–µ—Ä –ø–æ–∑–∏—Ü–∏–∏:** `{sig.position_size_pct_nav}% NAV`  
"""
        )
        st.info(sig.narrative_ru)

        alt = sig.alternatives[0]
        st.markdown("**–ê–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–π –ø–ª–∞–Ω**")
        st.markdown(
            f"- {alt.if_condition}: **{alt.action}** –æ—Ç `{alt.entry}` ‚Üí TP1 `{alt.take_profit[0]}`, "
            f"TP2 `{alt.take_profit[1]}`, —Å—Ç–æ–ø `{alt.stop}`"
        )

        st.caption(
            f"–°–∏–≥–Ω–∞–ª —Å–æ–∑–¥–∞–Ω: {sig.created_at.strftime('%Y-%m-%d %H:%M UTC')} ¬∑ "
            f"–ò—Å—Ç–µ–∫–∞–µ—Ç: {sig.expires_at.strftime('%Y-%m-%d %H:%M UTC')}"
        )
        st.caption(sig.disclaimer)

    # --- –ò–Ω–¥–∏–∫–∞—Ç–æ—Ä + Dev-–±–ª–æ–∫ + –ë—ç–∫—Ç–µ—Å—Ç ---
    with col2:
        # –°—á–∏—Ç–∞–µ–º [-2..+2] –¥–ª—è —Å—Ç—Ä–µ–ª–∫–∏
        score = 0.0
        if sig.action == "BUY":
            score = min(2.0, max(0.0, (sig.confidence - 0.5) / 0.4 * 2.0))
        elif sig.action == "SHORT":
            score = -min(2.0, max(0.0, (sig.confidence - 0.5) / 0.4 * 2.0))

        if show_gauge:
            fig = render_sentiment_gauge(score)  # –≤–Ω—É—Ç—Ä–∏ —É–∂–µ —Ç—ë–º–Ω–∞—è —Ç–µ–º–∞, –≥—Ä–∞–¥–∏–µ–Ω—Ç –∏ —Å–≥–ª–∞–∂–∏–≤–∞–Ω–∏–µ
            st.pyplot(fig, use_container_width=True)

        if dev_mode:
            st.markdown("#### JSON")
            st.code(json.dumps(sig.dict(), default=str, ensure_ascii=False, indent=2), language="json")

        st.markdown("#### ¬´–ò–≥—Ä—É—à–µ—á–Ω—ã–π¬ª –±—ç–∫—Ç–µ—Å—Ç")
        if sig.action in ["BUY", "SHORT"]:
            res = toy_backtest(sig)
            st.metric("–°–∏–º—É–ª–∏—Ä–æ–≤–∞–Ω–Ω—ã–π PnL (–ø–æ—Å–ª–µ –∫–æ–º–∏—Å—Å–∏–π)", f"{res['pnl']*100:.2f}%")
            st.metric("–í—ã—Ö–æ–¥ –ø–æ —Ü–µ–Ω–µ", f"{res['exit_price']:.4f}")
            st.metric("–®–∞–≥–æ–≤ –¥–æ –≤—ã—Ö–æ–¥–∞", res["steps"])
        else:
            st.caption("–î–ª—è WAIT/CLOSE —Å–¥–µ–ª–æ–∫ –Ω–µ—Ç: –±—ç–∫—Ç–µ—Å—Ç –Ω–µ –∑–∞–ø—É—Å–∫–∞–µ—Ç—Å—è.")

else:
    st.markdown("> –í—ã–±–µ—Ä–∏ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã —Å–ª–µ–≤–∞ –∏ –Ω–∞–∂–º–∏ **–°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å —Å–∏–≥–Ω–∞–ª**.")
